[
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "device-message-adapter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker 2",
        "broker": "$(MQTTSERVERIP2)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "f82f8aa3.9d5aa8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Setup Oscillation Overthruster",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 3,
                "gy": 3,
                "cx": 3,
                "cy": 3,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a02777ed.d6b4e8",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker 1",
        "broker": "$(MQTTSERVERIP1)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "93049b70.2dc5c8",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings 2",
        "topic": "$(MQTTPUBLISHTOPIC2)",
        "qos": "0",
        "retain": "false",
        "broker": "79250bf3.365cc4",
        "x": 870,
        "y": 600,
        "wires": []
    },
    {
        "id": "8cda9011.eab33",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings 2",
        "topic": "$(MQTTSUBSCRIBETOPIC2)",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    },
    {
        "id": "dc36009e.fdeeb",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 40,
        "wires": [
            [
                "c4668e74.e4361"
            ]
        ]
    },
    {
        "id": "5902d0c0.241a6",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "Write initSettings.json",
        "filename": "initSettings.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "6eaa13e9.4147bc",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "initSettings",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "163af492.5e952b"
            ]
        ]
    },
    {
        "id": "163af492.5e952b",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "Read initSettings.json",
        "filename": "initSettings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "53c95857.5f3d68"
            ]
        ]
    },
    {
        "id": "53c95857.5f3d68",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Save initSettings in Memory",
        "func": "flow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 160,
        "wires": [
            [
                "6aa07e15.a283b"
            ]
        ]
    },
    {
        "id": "f69c600b.9542",
        "type": "exec",
        "z": "5f562f66.a301e",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "afd71a05.ebd4e8"
            ],
            [],
            []
        ]
    },
    {
        "id": "5b86fa96.034764",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "f69c600b.9542"
            ]
        ]
    },
    {
        "id": "afd71a05.ebd4e8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkStopIndex   = info.indexOf('/70');\nvar levelStopIndex   = info.lastIndexOf('dBm');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStopIndex));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStopIndex - 1));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nflow.set('linkQuality',linkQuality);\nflow.set('signalLevel', signalLevel);\nflow.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "dd1a96c6.43e088",
        "type": "tcp out",
        "z": "5f562f66.a301e",
        "host": "",
        "port": "5025",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "name": "Send To Scope",
        "x": 440,
        "y": 660,
        "wires": []
    },
    {
        "id": "cf62bf6b.2b7b2",
        "type": "tcp in",
        "z": "5f562f66.a301e",
        "name": "Scope",
        "server": "client",
        "host": "192.168.10.10",
        "port": "5025",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "\\n",
        "topic": "info",
        "base64": false,
        "x": 90,
        "y": 300,
        "wires": [
            [
                "6dec5de6.a80ee4",
                "29f0997e.472f36"
            ]
        ]
    },
    {
        "id": "656b8cee.c1ed04",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "GetData",
        "func": "if (flow.get('sendingDataSettings')) return null;\nif (flow.get('waitingForData')) return null;\nmsg.payload = 'SING;*OPC?\\n';\nflow.set('waitingForData',true);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 660,
        "wires": [
            [
                "dd1a96c6.43e088"
            ]
        ]
    },
    {
        "id": "539f73f3.d88b5c",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "656b8cee.c1ed04"
            ]
        ]
    },
    {
        "id": "889c1617.13fbc8",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 130,
        "y": 760,
        "wires": [
            [
                "39181e93.626f82"
            ]
        ]
    },
    {
        "id": "39181e93.626f82",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "setupData",
        "func": "setupData = {\n   \"chan1Scal\":\"0.05\",\n   \"chan2Scal\":\"0.020\",\n   \"chan3Scal\":\"0.020\",\n   \"chan4Scal\":\"0.050\",\n   \"chan1Pos\":\"0\",\n   \"chan2Pos\":\"0\",\n   \"chan3Pos\":\"0\",\n   \"chan4Pos\":\"0\",\n   \"chan1Pol\":\"NORM\",\n   \"chan2Pol\":\"NORM\",\n   \"chan3Pol\":\"NORM\",\n   \"chan4Pol\":\"NORM\",\n   \"trigLevel\":\"2\",\n   \"trigSlope\":\"NEG\",\n   \"trigMode\":\"NORM\",\n   \"timeScale\":\"200\",\n   \"timePos\":\"-500\",\n   \"rfFreq\":99.500,\n   \"iptStart\":370,\n   \"bunchStart\":10,\n   \"bunchStop\":165\n}\nflow.set('setupData',setupData);\nreturn {topic:'setupData',payload:setupData};",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 760,
        "wires": [
            [
                "b77b26ed.9ddc88"
            ]
        ]
    },
    {
        "id": "b77b26ed.9ddc88",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Setup",
        "func": "var setupData = flow.get('setupData');\nmsg.payload = '*RST\\n';\nmsg.payload = msg.payload + 'CHAN1:STAT ON;\\n';\nmsg.payload = msg.payload + 'CHAN1:POS ' + setupData.chan1Pos + ';\\n';\nmsg.payload = msg.payload + 'CHAN1:COUP DC;\\n';\nmsg.payload = msg.payload + 'CHAN1:SCAL ' + setupData.chan1Scal + ';\\n';\nmsg.payload = msg.payload + 'CHAN1:POL ' + setupData.chan1Pol + ';\\n';\nmsg.payload = msg.payload + 'CHAN2:STAT ON;\\n';\nmsg.payload = msg.payload + 'CHAN2:POS ' + setupData.chan2Pos + ';\\n';\nmsg.payload = msg.payload + 'CHAN2:COUP DC;\\n';\nmsg.payload = msg.payload + 'CHAN2:SCAL ' + setupData.chan2Scal + ';\\n';\nmsg.payload = msg.payload + 'CHAN3:STAT ON;\\n';\nmsg.payload = msg.payload + 'CHAN3:POS ' + setupData.chan3Pos + ';\\n';\nmsg.payload = msg.payload + 'CHAN3:COUP DCLimit;\\n';\nmsg.payload = msg.payload + 'CHAN3:SCAL ' + setupData.chan3Scal + ';\\n';\nmsg.payload = msg.payload + 'CHAN3:POL ' + setupData.chan3Pol + ';\\n';\nmsg.payload = msg.payload + 'CHAN3:BAND B20;\\n';\nmsg.payload = msg.payload + 'CHAN4:STAT ON;\\n';\nmsg.payload = msg.payload + 'CHAN4:POS ' + setupData.chan4Pos + ';\\n';\nmsg.payload = msg.payload + 'CHAN4:COUP DC;\\n';\n//msg.payload = msg.payload + 'CHAN4:COUP DCLimit;\\n';\nmsg.payload = msg.payload + 'CHAN4:SCAL ' + setupData.chan4Scal + ';\\n';\nmsg.payload = msg.payload + 'CHAN4:POL ' + setupData.chan4Pol + ';\\n';\n//msg.payload = msg.payload + 'CHAN4:BAND B20;\\n';\nmsg.payload = msg.payload + 'TRIG:A:SOUR EXT;\\n';\nmsg.payload = msg.payload + 'TRIG:EXT:COUP DC;\\n';\nmsg.payload = msg.payload + 'TRIG:A:EDGE:SLOP ' + setupData.trigSlope + ';\\n';\nmsg.payload = msg.payload + 'TRIG:A:MODE NORM\\n';\nmsg.payload = msg.payload + 'TRIG:A:LEV4 ' + setupData.trigLevel + ';\\n';\nmsg.payload = msg.payload + 'TIM:SCAL ' + setupData.timeScale + 'e-9;\\n';\nmsg.payload = msg.payload + 'TIM:POS ' + setupData.timePos + 'e-9;\\n';\nmsg.payload = msg.payload + 'ACQ:WRAT MSAM;\\n';\n//msg.payload = msg.payload + 'FORM UINT,8\\n';\nmsg.payload = msg.payload + 'FORM ASC;\\n';\nmsg.payload = msg.payload + 'CHAN:DATA:POIN DMAX;\\n';\nflow.set('sendingDataSettings', true);\nflow.set('waitingForData',false);\nvar scopeLimits = \n{\n   'npts': -1,\n   'xstart': -10000.0, \n   'xstop': -10000.0, \n}\nflow.set('scopeLimits', scopeLimits);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 760,
        "wires": [
            [
                "205e2b5d.5a4a44",
                "b7167640.af4a58"
            ]
        ]
    },
    {
        "id": "205e2b5d.5a4a44",
        "type": "tcp out",
        "z": "5f562f66.a301e",
        "host": "",
        "port": "5025",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "name": "Send To Scope",
        "x": 980,
        "y": 760,
        "wires": []
    },
    {
        "id": "b7167640.af4a58",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 580,
        "y": 720,
        "wires": [
            [
                "b8060c2d.f465f"
            ]
        ]
    },
    {
        "id": "29f0997e.472f36",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Read Yscale",
        "func": "if (!flow.get('sendingDataSettings')) return null;\ninfo = msg.payload;\nvar scopeLimits = flow.get('scopeLimits')\nif (scopeLimits.npts < 0) \n{\n    var info1 = info.split(',');\n    scopeLimits.xstart = Number(info1[0]);\n    scopeLimits.xstop = Number(info1[1]);\n    scopeLimits.npts = Number(info1[2]);\n    flow.set('sendingDataSettings', false)\n    flow.set('scopeLimits', scopeLimits);\n}\nvar newMsg = \n{\n    'topic':'yscale',\n    'payload': scopeLimits\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6dec5de6.a80ee4",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get Trace Data",
        "func": "if (!flow.get('waitingForData')) return [null, null, null, null];\nif (msg.payload.length == 1)\n{\n    var msg1 = {'topic':'getChan1','payload':'CHAN1:DATA?\\n'};\n    var msg2 = {'topic':'getChan2','payload':'CHAN2:DATA?\\n'};\n    var msg3 = {'topic':'getChan3','payload':'CHAN3:DATA?\\n'};\n    var msg4 = {'topic':'getChan4','payload':'CHAN4:DATA?\\n'};\n    context.set('itrace',1);\n    return [msg1, msg2, msg3, msg4, null];\n}\nelse\n{\n\n    if (context.get('itrace') == 1)\n    {\n        context.set('trace1',msg.payload);\n        context.set('itrace',2);\n        return [null, null, null, null, null];\n    }\n    \n    if (context.get('itrace') == 2)\n    {\n        context.set('trace2',msg.payload);\n        context.set('itrace',3);\n        return [null, null, null, null, null];\n    }\n\n    if (context.get('itrace') == 3)\n    {\n        context.set('trace3',msg.payload);\n        context.set('itrace',4);\n        return [null, null, null, null, null];\n    }\n\n    if (context.get('itrace') == 4)\n    {\n        var rfFreq = flow.get('setupData').rfFreq;\n        context.set('itrace',1);\n        context.set('trace4',msg.payload);\n        var scopeLimits = flow.get('scopeLimits');\n        var nptsRev = Math.round(scopeLimits.npts * 176.0e-6 / rfFreq / (scopeLimits.xstop - scopeLimits.xstart));\n        var istart0 = Math.round ((scopeLimits.npts - nptsRev) / 2);\n        istart0 = flow.get('setupData').iptStart;\n        var trace1String = context.get('trace1').split(',');\n        var trace2String = context.get('trace2').split(',');\n        var trace3String = context.get('trace3').split(',');\n        var trace4String = context.get('trace4').split(',');\n\n        var trace1 = [];\n        var trace2 = [];\n        var trace3 = [];\n        var trace4 = [];\n        var nptPerBunch = nptsRev / 176.0;\n        var twoPi = 2.0 *3.1415927;\n        \n        for (var ii = 0; ii < 176; ++ii) \n        {\n            var istart = Math.round(ii * nptPerBunch) + istart0;\n            var istop  = istart + Math.round(nptPerBunch);\n            trace1[ii] = 0.0;\n            trace2[ii] = 0.0;\n            trace3[ii] = 0.0;\n            trace4[ii] = 0.0;\n            for (var ipt = istart; ipt <= istop; ++ipt) \n            {\n                trace1[ii] = trace1[ii] + Number(trace1String[ipt]);\n                trace2[ii] = trace2[ii] + Number(trace2String[ipt]);\n                trace3[ii] = trace3[ii] + Number(trace3String[ipt]);\n                trace4[ii] = trace4[ii] + Number(trace4String[ipt]);\n            }\n            trace1[ii] = trace1[ii] / nptPerBunch;\n            trace2[ii] = trace2[ii] / nptPerBunch;\n            trace3[ii] = trace3[ii] / nptPerBunch;\n            trace4[ii] = trace4[ii] / nptPerBunch;\n        }\n        var msg5 = \n        {\n            'topic':'OscillationOverthruster/data/traces',\n            'payload':\n            {\n                'trace1'  :   trace1,\n                'trace2'  :   trace2,\n                'trace3'  :   trace3,\n                'trace4'  :   trace4\n            }\n        };\n        flow.set('waitingForData', false);\n        return [null, null, null, null, msg5];\n    }\n}\n",
        "outputs": 5,
        "noerr": 0,
        "x": 280,
        "y": 300,
        "wires": [
            [
                "359bbce3.d91914"
            ],
            [
                "9b4bd186.dced9"
            ],
            [
                "cf8d2fd9.b23ac"
            ],
            [
                "e83f5310.0a39e"
            ],
            [
                "3d3de896.30a338"
            ]
        ]
    },
    {
        "id": "359bbce3.d91914",
        "type": "tcp out",
        "z": "5f562f66.a301e",
        "host": "",
        "port": "5025",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "name": "Send To Scope",
        "x": 580,
        "y": 280,
        "wires": []
    },
    {
        "id": "9b4bd186.dced9",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "359bbce3.d91914"
            ]
        ]
    },
    {
        "id": "b8060c2d.f465f",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "CHAN1:DATA:HEAD?",
        "func": "return {'topic':'getChan1','payload':'CHAN1:DATA:HEAD?\\n'};",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 720,
        "wires": [
            [
                "205e2b5d.5a4a44"
            ]
        ]
    },
    {
        "id": "cf8d2fd9.b23ac",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 540,
        "y": 380,
        "wires": [
            [
                "359bbce3.d91914"
            ]
        ]
    },
    {
        "id": "3d3de896.30a338",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Process Bunch Waveforms",
        "func": "var rfFreq = flow.get('setupData').rfFreq;\nvar bunchStart = flow.get('setupData').bunchStart;\nvar bunchStop = flow.get('setupData').bunchStop;\nvar magn = [];\nvar phase = [];\n\nvar trace1 = msg.payload.trace1;\nvar trace2 = msg.payload.trace2;\nvar trace3 = msg.payload.trace3;\nvar trace4 = msg.payload.trace4;\n\nvar twoPi = 2.0 *3.1415927;\nvar avgMag = 0.0;\nvar bunchLengthScale = [];\nvar peakBeamCurrent = [];\nvar v5overV1 = 5.0; // for bunch length calibration)\n\nfor (var ii = 0; ii < 176; ++ii) \n{\n    phase[ii] = 0.0;\n    magn[ii] = Math.sqrt(trace1[ii] * trace1[ii] + 2.0 * trace2[ii] * 2.0 * trace2[ii]);\n    bunchLengthScale[ii] = 0.0;\n   \n    var v500 = -0.15674603 + Math.sqrt(0.15674603 * 0.15674603 -(-16.1 - trace4[ii] * 1000.0)/126);\n    var v100 =  1.24705882 - Math.sqrt(1.24705882 * 1.24705882 +(-3.16 - magn[ii] * 1000.0)/170);\n    if (v500 < 0.001) v500 = 0.001;\n    if (v100 < 0.001) v100 = 0.001;\n    if ((bunchStart <= ii) && (ii <= bunchStop))\n    {\n// added factor of two for 6 dB splitter\n// added another factor of 2 to match call 2018-10-09\n\n        phase[ii] = (1000000.0 / rfFreq) * Math.atan(2.0 * trace2[ii] /trace1[ii]) / (2.0 * 3.1415927);\n        bunchLengthScale[ii] = v5overV1 * v100 / v500;\n        if (bunchLengthScale[ii] < 1.0) bunchLengthScale[ii] = 1.0;\n        bunchLengthScale[ii] = Math.sqrt(Math.log(bunchLengthScale[ii]) / 24.0);\n        bunchLengthScale[ii] = 1000.0 * 1000.0 * 2.0 * bunchLengthScale[ii] /(rfFreq * twoPi * 1.414); //ps\n    }\n// cal'd on 2019-05-08 \n    magn[ii] = (1262.0 * magn[ii]  - 9.0) / 176.0;\n    avgMag = avgMag + magn[ii];\n}\nfor (var ii = 0; ii < bunchStart; ++ii) \n{\n    bunchLengthScale[ii] = bunchLengthScale[bunchStart];\n}\nfor (var ii = bunchStop; ii < 176; ++ii) \n{\n    bunchLengthScale[ii] = bunchLengthScale[bunchStop];\n}\nfor (var ii = 0; ii < 176; ++ii) \n{\n    peakBeamCurrent[ii] = 1000.0 * 1000.0 * magn[ii] / (rfFreq * bunchLengthScale[ii] * 2.506);\n\n}\navgMag = avgMag /176.0;\nvar newMsg = \n{\n    'topic'   : 'bunchWaveforms',\n    'payload' :\n    {\n        'trace1'          :   trace1,\n        'trace2'          :   trace2,\n        'trace3'          :   trace3,\n        'trace4'          :   trace4,\n        'magn'            :   magn,\n        'phase'           :   phase,\n        'avgMag'          :   avgMag,\n        'bunchLengthScale':   bunchLengthScale,\n        'peakBeamCurrent' :   peakBeamCurrent\n    }\n};\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "bf5cd69c.197428"
            ]
        ]
    },
    {
        "id": "bf5cd69c.197428",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Process Differential Traces",
        "func": "var difPhase = [];\nvar phaseHistory = [[],[],[]];\n\nvar twoPi = 2.0 *3.1415927;\n\nvar lastTrace = context.get('lastTrace');\nif (lastTrace == null)\n{\n    phaseHistory[0] = msg.payload.phase;\n    for (var itrace = 1; itrace < 3; ++itrace)\n    {\n        for (var ii = 0; ii < 176; ++ii)\n        {\n            phaseHistory[itrace][ii] = 0.0;\n        }\n    }\n    context.set('phaseHistory',phaseHistory);\n    context.set('lastTrace',0);\n    for (var ii = 0; ii < 176; ++ii)\n    {\n        difPhase[ii] = 0.0;\n    }\n}\nelse\n{\n    phaseHistory = context.get('phaseHistory');\n    var nextTrace = lastTrace + 1;\n    if (nextTrace > 2) nextTrace = 0;\n    phaseHistory[nextTrace] = msg.payload.phase;\n    context.set('phaseHistory',phaseHistory);\n    context.set ('lastTrace',nextTrace);\n    for (var ii = 0; ii < 176; ++ii)\n    {\n        difPhase[ii] = phaseHistory[nextTrace][ii] - phaseHistory[lastTrace][ii];\n    }\n}\nvar newMsg = \n{\n    'topic'   : 'bunchWaveforms',\n    'payload' :\n    {\n        'trace1'            :   msg.payload.trace1,\n        'trace2'            :   msg.payload.trace2,\n        'trace3'            :   msg.payload.trace3,\n        'trace4'            :   msg.payload.trace4,\n        'magn'              :   msg.payload.magn,\n        'phase'             :   msg.payload.phase,\n        'avgMag'            :   msg.payload.avgMag,\n        'bunchLengthScale'  :   msg.payload.bunchLengthScale,\n        'peakBeamCurrent'   :   msg.payload.peakBeamCurrent,\n        'difPhase'          :   difPhase,\n\n    }\n};\nreturn newMsg\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 520,
        "wires": [
            [
                "530679a3.7b06e8"
            ]
        ]
    },
    {
        "id": "530679a3.7b06e8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Process Modes",
        "func": "var bunchStart = flow.get('setupData').bunchStart;\nvar bunchStop = flow.get('setupData').bunchStop;\nvar twoPi = 2.0 *3.1415927;\nvar modeM = [];\nvar magThreshold = 0.5 * msg.payload.avgMag;\nvar nbunches = bunchStop - bunchStart + 1.0;\nfor (var mode = 0; mode < 88; ++mode)\n{\n    var modeI = 0.0;\n    var modeQ = 0.0;\n    for (var bunch = bunchStart; bunch <= bunchStop; ++bunch)\n    {\n        modeI = modeI + Math.cos(twoPi * mode  * bunch / 176.0 ) * msg.payload.difPhase[bunch];\n        modeQ = modeQ + Math.sin(twoPi * mode  * bunch / 176.0 ) * msg.payload.difPhase[bunch];\n    }\n    modeI = modeI / nbunches;\n    modeQ = modeQ / nbunches;\n    modeM[mode] = Math.sqrt(modeI * modeI + modeQ * modeQ);\n}\n\nvar bunchCount = 0.0;\nvar beamCurrent = 0.0;\nvar avgPhase = 0.0;\nvar avgQ = 0.0;\nfor (var ii = 0; ii < 176; ++ii)\n{\n    beamCurrent = beamCurrent + msg.payload.magn[ii];\n    if (msg.payload.magn[ii] > magThreshold)\n    {\n        avgPhase = avgPhase + msg.payload.phase[ii];\n        bunchCount = bunchCount + 1;\n    }\n    avgQ = avgQ + msg.payload.trace3[ii];\n}\nif (bunchCount < 1.0) bunchCount = 1.0;\nbeamCurrent = Math.round(100.0 * beamCurrent) / 100.0;\navgPhase = Math.round(100.0 * avgPhase / bunchCount) / 100.0;\navgQ = avgQ / 176.0;\navgQ = Math.round(10000.0 * avgQ) / 10000.0;\n\nvar maxDipoleMode = -1\nvar maxDipoleModeAmp = 0.0;\nvar rmsModeAmp = 0.0;\nfor (var ii = 0; ii < 88; ++ii)\n{\n    rmsModeAmp = rmsModeAmp + modeM[ii] * modeM[ii];\n    if (modeM[ii] > maxDipoleModeAmp)\n    {\n        maxDipoleModeAmp = modeM[ii];\n        maxDipoleMode = ii;\n    }\n}\nmaxDipoleModeAmp = Math.round(100.0 * maxDipoleModeAmp) / 100.0;\nrmsModeAmp = Math.round(100.0 * Math.sqrt(rmsModeAmp) ) / 100.0;\nvar modeNumber = [];\nfor (var ii = 0; ii < 88; ++ii) modeNumber[ii] = ii;\nvar bunchNumber = [];\nfor (var ii = 0; ii < 176; ++ii) bunchNumber[ii] = ii;\ndevice = flow.get('device');\n\ndevice.beamCurrent.value      =  beamCurrent;\ndevice.maxDipoleMode.value    =  maxDipoleMode;\ndevice.avgPhase.value         =  avgPhase;\ndevice.maxDipoleModeAmp.value =  maxDipoleModeAmp;\ndevice.rmsModeAmp.value       =  rmsModeAmp;\ndevice.avgMag.value           =  msg.payload.avgMag;\ndevice.phaseShiftQ.value      =  avgQ;\ndevice.modeM.value            =  [modeNumber,modeM];\ndevice.bunchCurrent.value     =  [bunchNumber,msg.payload.magn];\ndevice.difPhase.value         =  [bunchNumber,msg.payload.difPhase];\ndevice.phase.value            =  [bunchNumber,msg.payload.phase];\ndevice.bunchLength.value      =  [bunchNumber,msg.payload.bunchLengthScale];\ndevice.peakBunchCurrent.value =  [bunchNumber,msg.payload.peakBeamCurrent];\ndevice.trace1.value =  [bunchNumber,msg.payload.trace1];\ndevice.trace2.value =  [bunchNumber,msg.payload.trace2];\ndevice.trace3.value =  [bunchNumber,msg.payload.trace3];\ndevice.trace4.value =  [bunchNumber,msg.payload.trace4];\ndevice.linkQuality.value =  flow.get('linkQuality');\ndevice.signalLevel.value =  flow.get('signalLevel');\nflow.set('device', device);\nreturn {topic:'deviceReadings',payload:device};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 560,
        "wires": [
            [
                "780da126.afaca"
            ]
        ]
    },
    {
        "id": "e83f5310.0a39e",
        "type": "delay",
        "z": "5f562f66.a301e",
        "name": "",
        "pauseType": "delay",
        "timeout": "4.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 550,
        "y": 420,
        "wires": [
            [
                "359bbce3.d91914"
            ]
        ]
    },
    {
        "id": "67bf470f.ef29c8",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "Publish Readings 1",
        "topic": "$(MQTTPUBLISHTOPIC1)",
        "qos": "0",
        "retain": "false",
        "broker": "a02777ed.d6b4e8",
        "x": 870,
        "y": 540,
        "wires": []
    },
    {
        "id": "ad85bb0c.86a888",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "Subscribe Settings 1",
        "topic": "$(MQTTSUBSCRIBETOPIC1)",
        "qos": "0",
        "datatype": "auto",
        "broker": "a02777ed.d6b4e8",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "dc36009e.fdeeb"
            ]
        ]
    },
    {
        "id": "c4668e74.e4361",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Make Pretty",
        "func": "var jsonPretty = JSON.stringify(msg.payload,null,2);\nreturn {topic: msg.payload, payload:jsonPretty};",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 40,
        "wires": [
            [
                "5902d0c0.241a6"
            ]
        ]
    },
    {
        "id": "6aa07e15.a283b",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Settings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'setting');\nflow.set('device', msg.payload); \n\nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 980,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "780da126.afaca",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Readings Alarm Scan",
        "func": "scalarAlarmScan(msg.payload, 'reading');\nflow.set('device', msg.payload); \n\nreturn msg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value < actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value > actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 600,
        "wires": [
            [
                "93049b70.2dc5c8",
                "67bf470f.ef29c8"
            ]
        ]
    }
]